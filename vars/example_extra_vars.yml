#
# Customizable parameters for a cluster.
#

---
#
# These are all the specific variables for your deployment.
# Things that need to be set and known by Ansible for its
# run, but which you wouldn't want to check in or put under
# source control: Passwords, repo URLs, keyfile locations,
# etc.
#

EXT:
    PURPOSE:                        "deploy"   # or "deploy". If "testrun", all instances will be shutdown
                                               # and terminated at the end (if this is a cloud-based deployment)

    #
    # When deploying via Vagrant, the ARCHITECTURE section can be
    # commented out or removed.
    #
    ARCHITECTURE:
        cloud_provider: "ec2"                              # One of the supported providers, currently
                                                           # "ec2" and "digitalocean". Each of those
                                                           # providers requires a section of variables
                                                           # below, starting below, such as "EXT.EC2"
                                                           # or similar.
        num_hosts:      5                                  # The number of hosts you wish to create
                                                           # this setting is only used when Ansible
                                                           # performs the host initialization, for
                                                           # example via EC2.
        cloud_inventory_dump_file:  "/var/tmp/cloud_inv"   # Dynamically generated inventory is dumped here 
                                                           # (random number will be added to filename).

    #
    # The cache machine is used as APT as well as PIP cache. If 'create' is
    # specified and a cloud provider is used for automatic provisioning of
    # hosts then one of the hosts also serves as cache. If Vagrant is used
    # then an extra host is created for cache purposes. It's useful to have
    # an extra host in that case, since you can easily re-use it for other
    # projects as well.
    #
    # To use an existing cache host, specify 'use' as the value for pkg_cache
    # and specify the cache's IP address in pkg_cache_existing_ip_addr.
    #
    CACHE:
        pkg_cache:                    "create"    # "create" or "use" or "none"
        pkg_cache_existing_ip_addr:   ""          # IP address of cache server, ignored (leave blank) if "create" or "none"

    #
    # Specifications needed to access the repository for your source code.
    # This currently assumes that an SSH key (the deployment key) is needed
    # for access.
    #
    REPO:
        host:           "bitbucket.org"
        url:            "ssh://hg@bitbucket.org/......."   # complete the repository URL
        deployment_key: "/home/localuser/..."              # path to the deployment key file

    #
    # Some specifications needed for the Django application.
    #
    DJANGO:
        secret:         "....."                            # the Django secret
        schema:         "http://"
        dns:            "www.example.com"                  # the domain name for the Django server
        appname:        "myapp"                            # name of the Django app/project
        testapps:       "app1 app2 app2"                   # space-separated list of all apps to unit-test

    #
    # Users for the appserver.
    #
    USERS:
        deploy_user:    "myapp"                            # user account created on host, running the appserver
        deploy_group:   "myapp-users"                      # group for that account

    #
    # Database specifications and parameters.
    #
    DATABASE:
        db_user:        "myapp_db_user"                    # the database user
        db_password:    "super secret password"            # the database password
        db_name:        "myapp_db"                         # the database name


    #
    # These EC2 specific settings are only used by "cloud_site.yml" and if
    # EXT.ARCHITECTURE.cloud_provider is set to "ec2". With "site.yml" or
    # a different cloud provider, they are ignored.
    #
    # Note that "EC2.region" specifies where you wish to deploy the cluster. The
    # region you specify in that variable needs to be present in the "EC2.regions_settings"
    # dictionary and will have to have all its specifics defined there.
    #
    EC2:
        region:         "ap-southeast-2"                   # the EC2 region in which you want to deploy
        instance_type:  "t1.micro"                         # the instance type you wish to create
        regions_settings:
            ap-southeast-2:
                ssh_key_name:       "....."                # your SSH access key name, as it is known to EC2
                private_key_file:   "/home/localuser....." # path to your local copy of the EC2 SSH access key
                security_group:     "....."                # name of the EC2 security group you wish to use
                image:              "ami-0729b73d"         # the EC2 image ID (this, for example, is Ubuntu 13.10 64 bit)


    #
    # These DigitalOcean specific settings are only used by "cloud_site.yml" and if
    # EXT.ARCHITECTURE.cloud_provider is set to "digitalocean". With "site.yml" or
    # a different cloud provider, they are ignored.
    #
    DIGITALOCEAN:
        client_id:      "..."                              # your client ID (see under API on their web site)
        api_key:        "..."                              # your API KEY (see under API on their web site)
        ssh_key_file:   "..."                              # path to your SSH key file for your registered SSH key
        ssh_key_id:     ...                                # SSH key ID: Can only be found via API 
        # Currently supported regions:
        #     San Francisco:        3
        #     New York:             4
        #     Amsterdam:            5
        #     Singapore:            6
        region:         3
        # Many different images. This one here is Ubuntu 13.10 64 bit.
        image:          1505699
        # Currently supported sizes:
        #     512 MB:               66
        #     1 GB:                 63
        #     2 GB:                 62
        #     4 GB:                 64
        #     8 GB:                 65
        #     ...
        size:           66


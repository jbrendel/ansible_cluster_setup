#
# Actions on the localhost: Bring up DigitalOcean instances and add to our groups
#

---
#
# This playbook runs actions not on some remote server, but on the local
# host on which Ansible is running. It uses the "digital_ocean" module to
# dynamically create hosts.
#
- name: create the cluster hosts
  hosts: localhost
  gather_facts: False

  tasks:
    - name: get unique ID for cluster
      local_action: >
        command date "+%N"
      register: timestamp

    #
    # Using the "digital_ocean" module, we create some number of hosts. All those
    # variables here just specify the parameters, access keys, image types,
    # and so on.
    #
    - name: launch digital-ocean instances
      local_action: >
        digital_ocean state=present command=droplet name=droplet-{{ timestamp.stdout }}-{{ item }}
                      client_id={{ EXT.DIGITALOCEAN.client_id }}
                      api_key={{ EXT.DIGITALOCEAN.api_key }}
                      size_id={{ EXT.DIGITALOCEAN.size }}
                      region_id={{ EXT.DIGITALOCEAN.region }}
                      image_id={{ EXT.DIGITALOCEAN.image }}
                      ssh_key_ids={{ EXT.DIGITALOCEAN.ssh_key_id }}
                      wait_timeout=500
      with_sequence: count={{ EXT.ARCHITECTURE.num_hosts }}
      register: droplet_instances

    #
    # Now we dynamically add all those hosts ("with items: # ec2results.instances")
    # to the group, for whose name we just chose the EC2-region name. Since EC2
    # uses different SSH keys (and possibly even security groups) in different
    # regions, it is useful to have these hosts in a region-specific group.
    # That allows us to specify a variable file with the region-sepecific
    # settings.
    #
    - name: add new instance to digitalocean-hosts group
      local_action: add_host hostname={{ item.droplet.ip_address }} groupname=digitalocean-hosts
      with_items: droplet_instances.results

    #
    # We take one (the first) of those machines to populate the frontend group.
    # I'm makeing sure to define the anible_ssh_host variable for this host,
    # since we will need that variable much later, when we fill in the load
    # balancing group in the nginx config file.
    #
    - name: add new instances to frontend group
      local_action: >
        add_host hostname={{ droplet_instances.results[0].droplet.ip_address }}
                 ansible_ssh_host={{ droplet_instances.results[0].droplet.ip_address }}
                 groupname=frontend-hosts

    #
    # We take the second one to fill the backend group.
    #
    - name: add new instances to backend group
      local_action: >
        add_host hostname={{ droplet_instances.results[1].droplet.ip_address }}
                 groupname=backend-hosts

    #
    # All the remaining hosts are added to the applayer host group.
    - name: add new instances to applayer group
      local_action: >
        add_host hostname={{ item.droplet.ip_address }}
        groupname=applayer-hosts
      with_items: droplet_instances.results[2:]

    #
    # We won't proceed until we have confirmed that we have SSH access to
    # each instance. It won't actually attempt to login. It just waits until
    # the port for SSH opens on the host.
    #
    - name: wait for SSH to come up
      local_action: >
        wait_for host={{ item.droplet.ip_address }} port=22
                 delay=10 timeout=320 state=started
      with_items: droplet_instances.results

